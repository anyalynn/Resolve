// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Resolve.Data;

namespace Resolve.Migrations
{
    [DbContext(typeof(ResolveCaseContext))]
    [Migration("20201014161317_updateMoveWorker")]
    partial class updateMoveWorker
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.0-preview.3.20181.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Resolve.Models.Approver", b =>
                {
                    b.Property<int>("CaseID")
                        .HasColumnType("int");

                    b.Property<string>("LocalUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Approved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("LocalGroupID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Order")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("CaseID", "LocalUserID");

                    b.HasIndex("LocalGroupID");

                    b.HasIndex("LocalUserID");

                    b.ToTable("Approver");
                });

            modelBuilder.Entity("Resolve.Models.AxiumFeeSchedule", b =>
                {
                    b.Property<int>("CaseID")
                        .HasColumnType("int");

                    b.Property<int?>("AxiumCodeType")
                        .HasColumnType("int");

                    b.Property<int?>("AxiumSchedRequestType")
                        .HasColumnType("int");

                    b.Property<int?>("AxiumScheduleType")
                        .HasColumnType("int");

                    b.Property<int?>("Discipline")
                        .HasColumnType("int");

                    b.Property<string>("Fee")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Justification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProcedureCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProdCodeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Site")
                        .HasColumnType("int");

                    b.Property<bool>("UnitsFactored")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("CaseID");

                    b.ToTable("AxiumFeeSchedule");
                });

            modelBuilder.Entity("Resolve.Models.AxiumFeeScheduleTracking", b =>
                {
                    b.Property<int>("AxiumFeeScheduleTrackingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AxiumCodeType")
                        .HasColumnType("int");

                    b.Property<int?>("AxiumSchedRequestType")
                        .HasColumnType("int");

                    b.Property<int?>("AxiumScheduleType")
                        .HasColumnType("int");

                    b.Property<int>("CaseAuditID")
                        .HasColumnType("int");

                    b.Property<int>("CaseID")
                        .HasColumnType("int");

                    b.Property<int?>("Discipline")
                        .HasColumnType("int");

                    b.Property<string>("Fee")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Justification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProcedureCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProdCodeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Site")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("UnitsFactored")
                        .HasColumnType("bit");

                    b.HasKey("AxiumFeeScheduleTrackingID");

                    b.HasIndex("CaseAuditID");

                    b.HasIndex("CaseID");

                    b.ToTable("AxiumFeeScheduleTracking");
                });

            modelBuilder.Entity("Resolve.Models.CPPaymentRequest", b =>
                {
                    b.Property<int>("CaseID")
                        .HasColumnType("int");

                    b.Property<string>("Amount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BudgetNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Explanation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Payee")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequesterName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CaseID");

                    b.ToTable("CPPaymentRequest");
                });

            modelBuilder.Entity("Resolve.Models.CPPaymentRequestTracking", b =>
                {
                    b.Property<int>("CPPaymentRequestTrackingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Amount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BudgetNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CaseAuditID")
                        .HasColumnType("int");

                    b.Property<int>("CaseID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Explanation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Payee")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequesterName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CPPaymentRequestTrackingID");

                    b.HasIndex("CaseAuditID");

                    b.HasIndex("CaseID");

                    b.ToTable("CPPaymentRequestTracking");
                });

            modelBuilder.Entity("Resolve.Models.Case", b =>
                {
                    b.Property<int>("CaseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CaseCID")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(max)")
                        .HasComputedColumnSql("'CASE' + CONVERT([nvarchar](23),[CaseID]+10000000)");

                    b.Property<DateTime>("CaseCreationTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("CaseStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CaseTypeID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocalUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("OnBehalfOf")
                        .HasColumnType("bit");

                    b.Property<int?>("Processed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("CaseID");

                    b.HasIndex("CaseTypeID");

                    b.HasIndex("LocalUserID");

                    b.ToTable("Case");
                });

            modelBuilder.Entity("Resolve.Models.CaseAttachment", b =>
                {
                    b.Property<int>("CaseAttachmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AttachmentTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("CaseID")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocalUserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CaseAttachmentID");

                    b.HasIndex("CaseID");

                    b.HasIndex("LocalUserID");

                    b.ToTable("CaseAttachment");
                });

            modelBuilder.Entity("Resolve.Models.CaseAudit", b =>
                {
                    b.Property<int>("CaseAuditID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuditLog")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AuditTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("CaseID")
                        .HasColumnType("int");

                    b.Property<string>("LocalUserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CaseAuditID");

                    b.HasIndex("CaseID");

                    b.HasIndex("LocalUserID");

                    b.ToTable("CaseAudit");
                });

            modelBuilder.Entity("Resolve.Models.CaseComment", b =>
                {
                    b.Property<int>("CaseCommentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CaseID")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CommentTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("LocalUserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CaseCommentID");

                    b.HasIndex("CaseID");

                    b.HasIndex("LocalUserID");

                    b.ToTable("CaseComment");
                });

            modelBuilder.Entity("Resolve.Models.CaseType", b =>
                {
                    b.Property<int>("CaseTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CaseTypeTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("GroupNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<bool>("Hierarchical_Approval")
                        .HasColumnType("bit");

                    b.Property<string>("LongDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CaseTypeID");

                    b.HasAlternateKey("CaseTypeTitle");

                    b.ToTable("CaseType");
                });

            modelBuilder.Entity("Resolve.Models.CaseTypeGroup", b =>
                {
                    b.Property<int>("CaseTypeID")
                        .HasColumnType("int");

                    b.Property<string>("LocalGroupID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Order")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("CaseTypeID", "LocalGroupID");

                    b.HasIndex("LocalGroupID");

                    b.ToTable("CaseTypeGroup");
                });

            modelBuilder.Entity("Resolve.Models.CompAllowanceChange", b =>
                {
                    b.Property<int>("CaseID")
                        .HasColumnType("int");

                    b.Property<int?>("AllowanceChange")
                        .HasColumnType("int");

                    b.Property<string>("Amount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BudgetNumbers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Department")
                        .HasColumnType("int");

                    b.Property<string>("DetailedDescription")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<int?>("EWorkerType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EffectiveEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EffectiveStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeEID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HireType")
                        .HasColumnType("int");

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<int?>("ScholarCompAllowanceChange")
                        .HasColumnType("int");

                    b.Property<int?>("SupOrg")
                        .HasColumnType("int");

                    b.HasKey("CaseID");

                    b.ToTable("CompAllowanceChange");
                });

            modelBuilder.Entity("Resolve.Models.CompAllowanceChangeTracking", b =>
                {
                    b.Property<int>("CompAllowanceChangeTrackingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AllowanceChange")
                        .HasColumnType("int");

                    b.Property<string>("Amount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BudgetNumbers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CaseAuditID")
                        .HasColumnType("int");

                    b.Property<int>("CaseID")
                        .HasColumnType("int");

                    b.Property<int?>("Department")
                        .HasColumnType("int");

                    b.Property<string>("DetailedDescription")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<int?>("EWorkerType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EffectiveEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EffectiveStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeEID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HireType")
                        .HasColumnType("int");

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<int?>("ScholarCompAllowanceChange")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SupOrg")
                        .HasColumnType("int");

                    b.HasKey("CompAllowanceChangeTrackingID");

                    b.HasIndex("CaseAuditID");

                    b.HasIndex("CaseID");

                    b.ToTable("CompAllowanceChangeTracking");
                });

            modelBuilder.Entity("Resolve.Models.CompBasePayChange", b =>
                {
                    b.Property<int>("CaseID")
                        .HasColumnType("int");

                    b.Property<string>("Amount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BasePayChange")
                        .HasColumnType("int");

                    b.Property<string>("BudgetNumbers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CWorkerType")
                        .HasColumnType("int");

                    b.Property<int?>("Department")
                        .HasColumnType("int");

                    b.Property<string>("DetailedDescription")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<DateTime?>("EffectiveEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EffectiveStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeEID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HireType")
                        .HasColumnType("int");

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<int?>("SupOrg")
                        .HasColumnType("int");

                    b.HasKey("CaseID");

                    b.ToTable("CompBasePayChange");
                });

            modelBuilder.Entity("Resolve.Models.CompBasePayChangeTracking", b =>
                {
                    b.Property<int>("CompBasePayChangeTrackingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Amount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BasePayChange")
                        .HasColumnType("int");

                    b.Property<string>("BudgetNumbers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CWorkerType")
                        .HasColumnType("int");

                    b.Property<int>("CaseAuditID")
                        .HasColumnType("int");

                    b.Property<int>("CaseID")
                        .HasColumnType("int");

                    b.Property<int?>("Department")
                        .HasColumnType("int");

                    b.Property<string>("DetailedDescription")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<DateTime?>("EffectiveEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EffectiveStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeEID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HireType")
                        .HasColumnType("int");

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SupOrg")
                        .HasColumnType("int");

                    b.HasKey("CompBasePayChangeTrackingID");

                    b.HasIndex("CaseAuditID");

                    b.HasIndex("CaseID");

                    b.ToTable("CompBasePayChangeTracking");
                });

            modelBuilder.Entity("Resolve.Models.CostAllocationChange", b =>
                {
                    b.Property<int>("CaseID")
                        .HasColumnType("int");

                    b.Property<int?>("AWorkerType")
                        .HasColumnType("int");

                    b.Property<string>("BudgetNumbers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Department")
                        .HasColumnType("int");

                    b.Property<string>("DetailedDescription")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<DateTime?>("EffectiveEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EffectiveStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeEID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HireType")
                        .HasColumnType("int");

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<int?>("SupOrg")
                        .HasColumnType("int");

                    b.HasKey("CaseID");

                    b.ToTable("CostAllocationChange");
                });

            modelBuilder.Entity("Resolve.Models.CostAllocationChangeTracking", b =>
                {
                    b.Property<int>("CostAllocationChangeTrackingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AWorkerType")
                        .HasColumnType("int");

                    b.Property<string>("BudgetNumbers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CaseAuditID")
                        .HasColumnType("int");

                    b.Property<int>("CaseID")
                        .HasColumnType("int");

                    b.Property<int?>("Department")
                        .HasColumnType("int");

                    b.Property<string>("DetailedDescription")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<DateTime?>("EffectiveEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EffectiveStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeEID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HireType")
                        .HasColumnType("int");

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SupOrg")
                        .HasColumnType("int");

                    b.HasKey("CostAllocationChangeTrackingID");

                    b.HasIndex("CaseAuditID");

                    b.HasIndex("CaseID");

                    b.ToTable("CostAllocationChangeTracking");
                });

            modelBuilder.Entity("Resolve.Models.EmailPreference", b =>
                {
                    b.Property<string>("LocalUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("AttachmentCreation")
                        .HasColumnType("bit");

                    b.Property<bool>("CaseAssignment")
                        .HasColumnType("bit");

                    b.Property<bool>("CaseCreation")
                        .HasColumnType("bit");

                    b.Property<bool>("CaseProcessed")
                        .HasColumnType("bit");

                    b.Property<bool>("CasesAssignedToUser")
                        .HasColumnType("bit");

                    b.Property<bool>("CasesAssignedToUsersGroups")
                        .HasColumnType("bit");

                    b.Property<bool>("CasesCreatedByUser")
                        .HasColumnType("bit");

                    b.Property<bool>("CommentCreation")
                        .HasColumnType("bit");

                    b.Property<bool>("GroupAssignment")
                        .HasColumnType("bit");

                    b.HasKey("LocalUserID");

                    b.ToTable("EmailPreference");
                });

            modelBuilder.Entity("Resolve.Models.EndDateChange", b =>
                {
                    b.Property<int>("CaseID")
                        .HasColumnType("int");

                    b.Property<int?>("AWorkerType")
                        .HasColumnType("int");

                    b.Property<string>("BudgetNumbers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Department")
                        .HasColumnType("int");

                    b.Property<string>("DetailedDescription")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<DateTime?>("EffectiveEndDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EffectiveStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeEID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HireType")
                        .HasColumnType("int");

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<int?>("SupOrg")
                        .HasColumnType("int");

                    b.HasKey("CaseID");

                    b.ToTable("EndDateChange");
                });

            modelBuilder.Entity("Resolve.Models.EndDateChangeTracking", b =>
                {
                    b.Property<int>("EndDateChangeTrackingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AWorkerType")
                        .HasColumnType("int");

                    b.Property<string>("BudgetNumbers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CaseAuditID")
                        .HasColumnType("int");

                    b.Property<int>("CaseID")
                        .HasColumnType("int");

                    b.Property<int?>("Department")
                        .HasColumnType("int");

                    b.Property<string>("DetailedDescription")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<DateTime?>("EffectiveEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EffectiveStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeEID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HireType")
                        .HasColumnType("int");

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SupOrg")
                        .HasColumnType("int");

                    b.HasKey("EndDateChangeTrackingID");

                    b.HasIndex("CaseAuditID");

                    b.HasIndex("CaseID");

                    b.ToTable("EndDateChangeTracking");
                });

            modelBuilder.Entity("Resolve.Models.FTEChange", b =>
                {
                    b.Property<int>("CaseID")
                        .HasColumnType("int");

                    b.Property<int?>("AWorkerType")
                        .HasColumnType("int");

                    b.Property<string>("Amount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BudgetNumbers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrentFTE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Department")
                        .HasColumnType("int");

                    b.Property<string>("DetailedDescription")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<DateTime?>("EffectiveEndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeEID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HireType")
                        .HasColumnType("int");

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<string>("ProposedFTE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SupOrg")
                        .HasColumnType("int");

                    b.HasKey("CaseID");

                    b.ToTable("FTEChange");
                });

            modelBuilder.Entity("Resolve.Models.FTEChangeTracking", b =>
                {
                    b.Property<int>("FTEChangeTrackingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AWorkerType")
                        .HasColumnType("int");

                    b.Property<string>("Amount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BudgetNumbers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CaseAuditID")
                        .HasColumnType("int");

                    b.Property<int>("CaseID")
                        .HasColumnType("int");

                    b.Property<string>("CurrentFTE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Department")
                        .HasColumnType("int");

                    b.Property<string>("DetailedDescription")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<DateTime?>("EffectiveEndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeEID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HireType")
                        .HasColumnType("int");

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<string>("ProposedFTE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SupOrg")
                        .HasColumnType("int");

                    b.HasKey("FTEChangeTrackingID");

                    b.HasIndex("CaseAuditID");

                    b.HasIndex("CaseID");

                    b.ToTable("FTEChangeTracking");
                });

            modelBuilder.Entity("Resolve.Models.FoodEvent", b =>
                {
                    b.Property<int>("CaseID")
                        .HasColumnType("int");

                    b.Property<bool>("BudgetDeficit")
                        .HasColumnType("bit");

                    b.Property<string>("BudgetNumbers")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BudgetPurpose")
                        .HasColumnType("int");

                    b.Property<string>("EmployeeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FoodApprovalForm")
                        .HasColumnType("int");

                    b.Property<float?>("ItemCost1")
                        .IsRequired()
                        .HasColumnType("real");

                    b.Property<float?>("ItemCost2")
                        .HasColumnType("real");

                    b.Property<float?>("ItemCost3")
                        .HasColumnType("real");

                    b.Property<float?>("ItemCost4")
                        .HasColumnType("real");

                    b.Property<float?>("ItemCost5")
                        .HasColumnType("real");

                    b.Property<float?>("ItemCost6")
                        .HasColumnType("real");

                    b.Property<float?>("ItemCost7")
                        .HasColumnType("real");

                    b.Property<string>("ItemName1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemName2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemName3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemName4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemName5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemName6")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemName7")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Justification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NumberAttending")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<float?>("Total")
                        .HasColumnType("real");

                    b.Property<int>("TravelFoodDepartment")
                        .HasColumnType("int");

                    b.HasKey("CaseID");

                    b.ToTable("FoodEvent");

                    b.HasCheckConstraint("CK_FoodEvent_BudgetPurpose_Enum_Constraint", "[BudgetPurpose] IN(0, 1, 2, 3, 4, 5, 6, 7)");

                    b.HasCheckConstraint("CK_FoodEvent_TravelFoodDepartment_Enum_Constraint", "[TravelFoodDepartment] IN(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18)");
                });

            modelBuilder.Entity("Resolve.Models.FoodEventTracking", b =>
                {
                    b.Property<int>("FoodEventTrackingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("BudgetDeficit")
                        .HasColumnType("bit");

                    b.Property<string>("BudgetNumbers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BudgetPurpose")
                        .HasColumnType("int");

                    b.Property<int>("CaseAuditID")
                        .HasColumnType("int");

                    b.Property<int>("CaseID")
                        .HasColumnType("int");

                    b.Property<string>("EmployeeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FoodApprovalForm")
                        .HasColumnType("int");

                    b.Property<float?>("ItemCost1")
                        .HasColumnType("real");

                    b.Property<float?>("ItemCost2")
                        .HasColumnType("real");

                    b.Property<float?>("ItemCost3")
                        .HasColumnType("real");

                    b.Property<float?>("ItemCost4")
                        .HasColumnType("real");

                    b.Property<float?>("ItemCost5")
                        .HasColumnType("real");

                    b.Property<float?>("ItemCost6")
                        .HasColumnType("real");

                    b.Property<float?>("ItemCost7")
                        .HasColumnType("real");

                    b.Property<string>("ItemName1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemName2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemName3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemName4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemName5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemName6")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemName7")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Justification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NumberAttending")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("Total")
                        .HasColumnType("real");

                    b.Property<int>("TravelFoodDepartment")
                        .HasColumnType("int");

                    b.HasKey("FoodEventTrackingID");

                    b.HasIndex("CaseAuditID");

                    b.HasIndex("CaseID");

                    b.ToTable("FoodEventTracking");

                    b.HasCheckConstraint("CK_FoodEventTracking_BudgetPurpose_Enum_Constraint", "[BudgetPurpose] IN(0, 1, 2, 3, 4, 5, 6, 7)");

                    b.HasCheckConstraint("CK_FoodEventTracking_TravelFoodDepartment_Enum_Constraint", "[TravelFoodDepartment] IN(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18)");
                });

            modelBuilder.Entity("Resolve.Models.GroupAssignment", b =>
                {
                    b.Property<int>("CaseID")
                        .HasColumnType("int");

                    b.Property<string>("LocalGroupID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CaseID", "LocalGroupID");

                    b.HasIndex("LocalGroupID");

                    b.ToTable("GroupAssignment");
                });

            modelBuilder.Entity("Resolve.Models.HiringAffiliateFaculty", b =>
                {
                    b.Property<int>("CaseID")
                        .HasColumnType("int");

                    b.Property<int>("Department")
                        .HasColumnType("int");

                    b.Property<int>("FacAffiliateTitle")
                        .HasColumnType("int");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CaseID");

                    b.ToTable("HiringAffiliateFaculty");

                    b.HasCheckConstraint("CK_HiringAffiliateFaculty_Department_Enum_Constraint", "[Department] IN(0, 1, 2, 3, 4, 5, 6, 7, 8)");

                    b.HasCheckConstraint("CK_HiringAffiliateFaculty_FacAffiliateTitle_Enum_Constraint", "[FacAffiliateTitle] IN(0, 1, 2, 3, 4)");
                });

            modelBuilder.Entity("Resolve.Models.HiringAffiliateFacultyTracking", b =>
                {
                    b.Property<int>("HiringAffiliateFacultyTrackingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CaseAuditID")
                        .HasColumnType("int");

                    b.Property<int>("CaseID")
                        .HasColumnType("int");

                    b.Property<int?>("Department")
                        .HasColumnType("int");

                    b.Property<int?>("FacAffiliateTitle")
                        .HasColumnType("int");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HiringAffiliateFacultyTrackingID");

                    b.HasIndex("CaseAuditID");

                    b.HasIndex("CaseID");

                    b.ToTable("HiringAffiliateFacultyTracking");
                });

            modelBuilder.Entity("Resolve.Models.HiringFaculty", b =>
                {
                    b.Property<int>("CaseID")
                        .HasColumnType("int");

                    b.Property<string>("AdminRole")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Barriers")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BudgetNumbers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BudgetType")
                        .HasColumnType("int");

                    b.Property<string>("CandidateName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Consequences")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Department")
                        .HasColumnType("int");

                    b.Property<string>("EmployeeReplaced")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FTE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FacHireReason")
                        .HasColumnType("int");

                    b.Property<int>("FacTitle")
                        .HasColumnType("int");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Justification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Salary")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CaseID");

                    b.ToTable("HiringFaculty");

                    b.HasCheckConstraint("CK_HiringFaculty_BudgetType_Enum_Constraint", "[BudgetType] IN(0, 1, 2, 3, 4, 5)");

                    b.HasCheckConstraint("CK_HiringFaculty_Department_Enum_Constraint", "[Department] IN(0, 1, 2, 3, 4, 5, 6, 7, 8)");

                    b.HasCheckConstraint("CK_HiringFaculty_FacHireReason_Enum_Constraint", "[FacHireReason] IN(0, 1, 2)");

                    b.HasCheckConstraint("CK_HiringFaculty_FacTitle_Enum_Constraint", "[FacTitle] IN(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38)");
                });

            modelBuilder.Entity("Resolve.Models.HiringFacultyTracking", b =>
                {
                    b.Property<int>("HiringFacultyTrackingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdminRole")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Barriers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BudgetNumbers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BudgetType")
                        .HasColumnType("int");

                    b.Property<string>("CandidateName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CaseAuditID")
                        .HasColumnType("int");

                    b.Property<int>("CaseID")
                        .HasColumnType("int");

                    b.Property<string>("Consequences")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Department")
                        .HasColumnType("int");

                    b.Property<string>("EmployeeReplaced")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FTE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FacHireReason")
                        .HasColumnType("int");

                    b.Property<int>("FacTitle")
                        .HasColumnType("int");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Justification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Salary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HiringFacultyTrackingID");

                    b.HasIndex("CaseAuditID");

                    b.HasIndex("CaseID");

                    b.ToTable("HiringFacultyTracking");

                    b.HasCheckConstraint("CK_HiringFacultyTracking_BudgetType_Enum_Constraint", "[BudgetType] IN(0, 1, 2, 3, 4, 5)");

                    b.HasCheckConstraint("CK_HiringFacultyTracking_Department_Enum_Constraint", "[Department] IN(0, 1, 2, 3, 4, 5, 6, 7, 8)");

                    b.HasCheckConstraint("CK_HiringFacultyTracking_FacHireReason_Enum_Constraint", "[FacHireReason] IN(0, 1, 2)");

                    b.HasCheckConstraint("CK_HiringFacultyTracking_FacTitle_Enum_Constraint", "[FacTitle] IN(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38)");
                });

            modelBuilder.Entity("Resolve.Models.HiringStaff", b =>
                {
                    b.Property<int>("CaseID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ActualEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ActualHireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Barriers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BudgetNumbers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BudgetPurpose")
                        .HasColumnType("int");

                    b.Property<int?>("BudgetType")
                        .HasColumnType("int");

                    b.Property<string>("CampusBox")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CandidateName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CandidateSelected")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("Citizenship")
                        .HasColumnType("int");

                    b.Property<string>("Consequences")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeReplaced")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FTE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("HireeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobPostingTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Justification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LimitedRecruitment")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MultipleBudgetsExplain")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("OvertimeEligible")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("PayRate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PosNum")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PostDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RecruitmentRun")
                        .HasColumnType("int");

                    b.Property<int?>("StaffHireReason")
                        .HasColumnType("int");

                    b.Property<int?>("StaffPositionType")
                        .HasColumnType("int");

                    b.Property<int?>("StaffWorkerType")
                        .HasColumnType("int");

                    b.Property<string>("StudentNum")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SupOrg")
                        .HasColumnType("int");

                    b.Property<string>("SupOrgManager")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Super")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("Supervised")
                        .HasColumnType("int");

                    b.Property<string>("UWHiresContact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UWHiresReq")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WeeklyHours")
                        .HasColumnType("int");

                    b.Property<string>("WorkdayReq")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Workstudy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("CaseID");

                    b.ToTable("HiringStaff");
                });

            modelBuilder.Entity("Resolve.Models.HiringStaffTracking", b =>
                {
                    b.Property<int>("HiringStaffTrackingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ActualEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ActualHireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Barriers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BudgetNumbers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BudgetPurpose")
                        .HasColumnType("int");

                    b.Property<int?>("BudgetType")
                        .HasColumnType("int");

                    b.Property<string>("CampusBox")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CandidateName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CandidateSelected")
                        .HasColumnType("bit");

                    b.Property<int>("CaseAuditID")
                        .HasColumnType("int");

                    b.Property<int>("CaseID")
                        .HasColumnType("int");

                    b.Property<int?>("Citizenship")
                        .HasColumnType("int");

                    b.Property<string>("Consequences")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeReplaced")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FTE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("HireeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobPostingTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Justification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LimitedRecruitment")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MultipleBudgetsExplain")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("OvertimeEligible")
                        .HasColumnType("bit");

                    b.Property<string>("PayRate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PosNum")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PostDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RecruitmentRun")
                        .HasColumnType("int");

                    b.Property<int?>("StaffHireReason")
                        .HasColumnType("int");

                    b.Property<int?>("StaffPositionType")
                        .HasColumnType("int");

                    b.Property<int?>("StaffWorkerType")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentNum")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SupOrg")
                        .HasColumnType("int");

                    b.Property<string>("SupOrgManager")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Super")
                        .HasColumnType("bit");

                    b.Property<int?>("Supervised")
                        .HasColumnType("int");

                    b.Property<string>("UWHiresContact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UWHiresReq")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WeeklyHours")
                        .HasColumnType("int");

                    b.Property<string>("WorkdayReq")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Workstudy")
                        .HasColumnType("bit");

                    b.HasKey("HiringStaffTrackingID");

                    b.HasIndex("CaseAuditID");

                    b.HasIndex("CaseID");

                    b.ToTable("HiringStaffTracking");
                });

            modelBuilder.Entity("Resolve.Models.LocalGroup", b =>
                {
                    b.Property<string>("LocalGroupID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GroupDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LocalUserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LocalGroupID");

                    b.HasAlternateKey("GroupName");

                    b.HasIndex("LocalUserID");

                    b.ToTable("LocalGroup");
                });

            modelBuilder.Entity("Resolve.Models.LocalUser", b =>
                {
                    b.Property<string>("LocalUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EmailID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LocalUserID");

                    b.HasAlternateKey("EmailID");

                    b.ToTable("LocalUser");
                });

            modelBuilder.Entity("Resolve.Models.MoveWorker", b =>
                {
                    b.Property<int>("CaseID")
                        .HasColumnType("int");

                    b.Property<string>("BudgetNumbers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetailedDescription")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<DateTime>("EffectiveStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeEID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FWorkerType")
                        .HasColumnType("int");

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<int?>("OSupOrg")
                        .HasColumnType("int");

                    b.Property<int?>("SupOrg")
                        .HasColumnType("int");

                    b.HasKey("CaseID");

                    b.ToTable("MoveWorker");
                });

            modelBuilder.Entity("Resolve.Models.MoveWorkerTracking", b =>
                {
                    b.Property<int>("MoveWorkerTrackingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BudgetNumbers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CaseAuditID")
                        .HasColumnType("int");

                    b.Property<int>("CaseID")
                        .HasColumnType("int");

                    b.Property<string>("DetailedDescription")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<DateTime>("EffectiveStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeEID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FWorkerType")
                        .HasColumnType("int");

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<int?>("OSupOrg")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SupOrg")
                        .HasColumnType("int");

                    b.HasKey("MoveWorkerTrackingID");

                    b.HasIndex("CaseAuditID");

                    b.HasIndex("CaseID");

                    b.ToTable("MoveWorkerTracking");
                });

            modelBuilder.Entity("Resolve.Models.OnBehalf", b =>
                {
                    b.Property<int>("CaseID")
                        .HasColumnType("int");

                    b.Property<string>("LocalUserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CaseID", "LocalUserID");

                    b.HasIndex("LocalUserID");

                    b.ToTable("OnBehalf");
                });

            modelBuilder.Entity("Resolve.Models.PatientEvent", b =>
                {
                    b.Property<int>("CaseID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Causes")
                        .HasColumnType("nvarchar(600)")
                        .HasMaxLength(600);

                    b.Property<string>("DentalRecordNum")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EventDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EventDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EventDepartment")
                        .HasColumnType("int");

                    b.Property<string>("EventDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(1500)")
                        .HasMaxLength(1500);

                    b.Property<int?>("EventLocation")
                        .HasColumnType("int");

                    b.Property<string>("EventTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("FactsDocumented")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("FirstReportedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("ManagerActionTaken")
                        .HasColumnType("nvarchar(600)")
                        .HasMaxLength(600);

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotifiedName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("NotifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PatientName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReporterActionTaken")
                        .HasColumnType("nvarchar(600)")
                        .HasMaxLength(600);

                    b.Property<string>("SupervisorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Witness1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Witness2")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CaseID");

                    b.ToTable("PatientEvent");
                });

            modelBuilder.Entity("Resolve.Models.PatientEventTracking", b =>
                {
                    b.Property<int>("PatientEventTrackingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CaseAuditID")
                        .HasColumnType("int");

                    b.Property<int>("CaseID")
                        .HasColumnType("int");

                    b.Property<string>("Causes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DentalRecordNum")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EventDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EventDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EventDepartment")
                        .HasColumnType("int");

                    b.Property<string>("EventDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EventLocation")
                        .HasColumnType("int");

                    b.Property<string>("EventTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("FactsDocumented")
                        .HasColumnType("bit");

                    b.Property<string>("FirstReportedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("ManagerActionTaken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotifiedName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("NotifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PatientName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReporterActionTaken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupervisorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Witness1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Witness2")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PatientEventTrackingID");

                    b.HasIndex("CaseAuditID");

                    b.HasIndex("CaseID");

                    b.ToTable("PatientEventTracking");
                });

            modelBuilder.Entity("Resolve.Models.PerioLimitedCare", b =>
                {
                    b.Property<int>("CaseID")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Complaint")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Other")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("OtherProcedure")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PerioExam")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("Prophy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("RestorativeExam")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("StudentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TChart")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TreatmentPlan")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("bwxrays")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("paxrays")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("CaseID");

                    b.ToTable("PerioLimitedCare");
                });

            modelBuilder.Entity("Resolve.Models.PerioLimitedCareTracking", b =>
                {
                    b.Property<int>("PerioLimitedCareTrackingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CaseAuditID")
                        .HasColumnType("int");

                    b.Property<int>("CaseID")
                        .HasColumnType("int");

                    b.Property<string>("Complaint")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Other")
                        .HasColumnType("bit");

                    b.Property<string>("OtherProcedure")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PerioExam")
                        .HasColumnType("bit");

                    b.Property<bool>("Prophy")
                        .HasColumnType("bit");

                    b.Property<bool>("RestorativeExam")
                        .HasColumnType("bit");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TChart")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TreatmentPlan")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("bwxrays")
                        .HasColumnType("bit");

                    b.Property<bool>("paxrays")
                        .HasColumnType("bit");

                    b.HasKey("PerioLimitedCareTrackingID");

                    b.HasIndex("CaseAuditID");

                    b.HasIndex("CaseID");

                    b.ToTable("PerioLimitedCareTracking");
                });

            modelBuilder.Entity("Resolve.Models.SampleCaseType", b =>
                {
                    b.Property<int>("CaseID")
                        .HasColumnType("int");

                    b.Property<string>("CaseDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Salary")
                        .HasColumnType("int");

                    b.HasKey("CaseID");

                    b.ToTable("SampleCaseType");
                });

            modelBuilder.Entity("Resolve.Models.SampleCaseTypeTracking", b =>
                {
                    b.Property<int>("SampleCaseTypeTrackingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CaseAuditID")
                        .HasColumnType("int");

                    b.Property<string>("CaseDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CaseID")
                        .HasColumnType("int");

                    b.Property<string>("EmployeeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Salary")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SampleCaseTypeTrackingID");

                    b.HasIndex("CaseAuditID");

                    b.HasIndex("CaseID");

                    b.ToTable("SampleCaseTypeTracking");
                });

            modelBuilder.Entity("Resolve.Models.ScholarResGradHire", b =>
                {
                    b.Property<int>("CaseID")
                        .HasColumnType("int");

                    b.Property<string>("BudgetNumbers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DWorkerType")
                        .HasColumnType("int");

                    b.Property<int?>("Department")
                        .HasColumnType("int");

                    b.Property<string>("DetailedDescription")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("GradJobProfile")
                        .HasColumnType("int");

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<int?>("ScholarJobProfile")
                        .HasColumnType("int");

                    b.Property<int?>("ScholarReqType")
                        .HasColumnType("int");

                    b.Property<string>("StipendAllowance")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SupOrg")
                        .HasColumnType("int");

                    b.HasKey("CaseID");

                    b.ToTable("ScholarResGradHire");
                });

            modelBuilder.Entity("Resolve.Models.ScholarResGradHireTracking", b =>
                {
                    b.Property<int>("ScholarResGradHireTrackingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BudgetNumbers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CaseAuditID")
                        .HasColumnType("int");

                    b.Property<int>("CaseID")
                        .HasColumnType("int");

                    b.Property<int?>("DWorkerType")
                        .HasColumnType("int");

                    b.Property<int?>("Department")
                        .HasColumnType("int");

                    b.Property<string>("DetailedDescription")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("GradJobProfile")
                        .HasColumnType("int");

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<int?>("ScholarJobProfile")
                        .HasColumnType("int");

                    b.Property<int?>("ScholarReqType")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StipendAllowance")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SupOrg")
                        .HasColumnType("int");

                    b.HasKey("ScholarResGradHireTrackingID");

                    b.HasIndex("CaseAuditID");

                    b.HasIndex("CaseID");

                    b.ToTable("ScholarResGradHireTracking");
                });

            modelBuilder.Entity("Resolve.Models.SecurityRolesChange", b =>
                {
                    b.Property<int>("CaseID")
                        .HasColumnType("int");

                    b.Property<int?>("AWorkerType")
                        .HasColumnType("int");

                    b.Property<int>("AcademicChair")
                        .HasColumnType("int");

                    b.Property<int>("AcademicDean")
                        .HasColumnType("int");

                    b.Property<int?>("Department")
                        .HasColumnType("int");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeEID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HCMInit1")
                        .HasColumnType("int");

                    b.Property<int>("HCMInit2")
                        .HasColumnType("int");

                    b.Property<int?>("HireType")
                        .HasColumnType("int");

                    b.Property<int>("I9")
                        .HasColumnType("int");

                    b.Property<bool>("IncludeSubordinates")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Manager")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<int>("SecurityRequestType")
                        .HasColumnType("int");

                    b.Property<int?>("SupOrg")
                        .HasColumnType("int");

                    b.Property<string>("SupervisedAccess")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TimeAbsenceApprover")
                        .HasColumnType("int");

                    b.Property<int>("TimeAbsenceInitiate")
                        .HasColumnType("int");

                    b.Property<bool>("TrainingCompleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("UWHiresManager")
                        .HasColumnType("int");

                    b.Property<string>("UWNetID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VOStaff")
                        .HasColumnType("int");

                    b.Property<int>("VOStaffCompCost")
                        .HasColumnType("int");

                    b.Property<int>("VOStaffCompPersonal")
                        .HasColumnType("int");

                    b.HasKey("CaseID");

                    b.ToTable("SecurityRolesChange");

                    b.HasCheckConstraint("CK_SecurityRolesChange_AcademicChair_Enum_Constraint", "[AcademicChair] IN(0, 1, 2)");

                    b.HasCheckConstraint("CK_SecurityRolesChange_AcademicDean_Enum_Constraint", "[AcademicDean] IN(0, 1, 2)");

                    b.HasCheckConstraint("CK_SecurityRolesChange_HCMInit1_Enum_Constraint", "[HCMInit1] IN(0, 1, 2)");

                    b.HasCheckConstraint("CK_SecurityRolesChange_HCMInit2_Enum_Constraint", "[HCMInit2] IN(0, 1, 2)");

                    b.HasCheckConstraint("CK_SecurityRolesChange_I9_Enum_Constraint", "[I9] IN(0, 1, 2)");

                    b.HasCheckConstraint("CK_SecurityRolesChange_Manager_Enum_Constraint", "[Manager] IN(0, 1, 2)");

                    b.HasCheckConstraint("CK_SecurityRolesChange_SecurityRequestType_Enum_Constraint", "[SecurityRequestType] IN(0, 1, 2)");

                    b.HasCheckConstraint("CK_SecurityRolesChange_TimeAbsenceApprover_Enum_Constraint", "[TimeAbsenceApprover] IN(0, 1, 2)");

                    b.HasCheckConstraint("CK_SecurityRolesChange_TimeAbsenceInitiate_Enum_Constraint", "[TimeAbsenceInitiate] IN(0, 1, 2)");

                    b.HasCheckConstraint("CK_SecurityRolesChange_UWHiresManager_Enum_Constraint", "[UWHiresManager] IN(0, 1, 2)");

                    b.HasCheckConstraint("CK_SecurityRolesChange_VOStaff_Enum_Constraint", "[VOStaff] IN(0, 1, 2)");

                    b.HasCheckConstraint("CK_SecurityRolesChange_VOStaffCompCost_Enum_Constraint", "[VOStaffCompCost] IN(0, 1, 2)");

                    b.HasCheckConstraint("CK_SecurityRolesChange_VOStaffCompPersonal_Enum_Constraint", "[VOStaffCompPersonal] IN(0, 1, 2)");
                });

            modelBuilder.Entity("Resolve.Models.SecurityRolesChangeTracking", b =>
                {
                    b.Property<int>("SecurityRolesChangeTrackingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AWorkerType")
                        .HasColumnType("int");

                    b.Property<int>("AcademicChair")
                        .HasColumnType("int");

                    b.Property<int>("AcademicDean")
                        .HasColumnType("int");

                    b.Property<int>("CaseAuditID")
                        .HasColumnType("int");

                    b.Property<int>("CaseID")
                        .HasColumnType("int");

                    b.Property<int?>("Department")
                        .HasColumnType("int");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeEID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HCMInit1")
                        .HasColumnType("int");

                    b.Property<int>("HCMInit2")
                        .HasColumnType("int");

                    b.Property<int?>("HireType")
                        .HasColumnType("int");

                    b.Property<int>("I9")
                        .HasColumnType("int");

                    b.Property<bool>("IncludeSubordinates")
                        .HasColumnType("bit");

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Manager")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<int>("SecurityRequestType")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SupOrg")
                        .HasColumnType("int");

                    b.Property<string>("SupervisedAccess")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TimeAbsenceApprover")
                        .HasColumnType("int");

                    b.Property<int>("TimeAbsenceInitiate")
                        .HasColumnType("int");

                    b.Property<bool>("TrainingCompleted")
                        .HasColumnType("bit");

                    b.Property<int>("UWHiresManager")
                        .HasColumnType("int");

                    b.Property<string>("UWNetID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VOStaff")
                        .HasColumnType("int");

                    b.Property<int>("VOStaffCompCost")
                        .HasColumnType("int");

                    b.Property<int>("VOStaffCompPersonal")
                        .HasColumnType("int");

                    b.HasKey("SecurityRolesChangeTrackingID");

                    b.HasIndex("CaseAuditID");

                    b.HasIndex("CaseID");

                    b.ToTable("SecurityRolesChangeTracking");

                    b.HasCheckConstraint("CK_SecurityRolesChangeTracking_AcademicChair_Enum_Constraint", "[AcademicChair] IN(0, 1, 2)");

                    b.HasCheckConstraint("CK_SecurityRolesChangeTracking_AcademicDean_Enum_Constraint", "[AcademicDean] IN(0, 1, 2)");

                    b.HasCheckConstraint("CK_SecurityRolesChangeTracking_HCMInit1_Enum_Constraint", "[HCMInit1] IN(0, 1, 2)");

                    b.HasCheckConstraint("CK_SecurityRolesChangeTracking_HCMInit2_Enum_Constraint", "[HCMInit2] IN(0, 1, 2)");

                    b.HasCheckConstraint("CK_SecurityRolesChangeTracking_I9_Enum_Constraint", "[I9] IN(0, 1, 2)");

                    b.HasCheckConstraint("CK_SecurityRolesChangeTracking_Manager_Enum_Constraint", "[Manager] IN(0, 1, 2)");

                    b.HasCheckConstraint("CK_SecurityRolesChangeTracking_SecurityRequestType_Enum_Constraint", "[SecurityRequestType] IN(0, 1, 2)");

                    b.HasCheckConstraint("CK_SecurityRolesChangeTracking_TimeAbsenceApprover_Enum_Constraint", "[TimeAbsenceApprover] IN(0, 1, 2)");

                    b.HasCheckConstraint("CK_SecurityRolesChangeTracking_TimeAbsenceInitiate_Enum_Constraint", "[TimeAbsenceInitiate] IN(0, 1, 2)");

                    b.HasCheckConstraint("CK_SecurityRolesChangeTracking_UWHiresManager_Enum_Constraint", "[UWHiresManager] IN(0, 1, 2)");

                    b.HasCheckConstraint("CK_SecurityRolesChangeTracking_VOStaff_Enum_Constraint", "[VOStaff] IN(0, 1, 2)");

                    b.HasCheckConstraint("CK_SecurityRolesChangeTracking_VOStaffCompCost_Enum_Constraint", "[VOStaffCompCost] IN(0, 1, 2)");

                    b.HasCheckConstraint("CK_SecurityRolesChangeTracking_VOStaffCompPersonal_Enum_Constraint", "[VOStaffCompPersonal] IN(0, 1, 2)");
                });

            modelBuilder.Entity("Resolve.Models.Termination", b =>
                {
                    b.Property<int>("CaseID")
                        .HasColumnType("int");

                    b.Property<int?>("AWorkerType")
                        .HasColumnType("int");

                    b.Property<string>("BudgetNumbers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ClosePosition")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("Department")
                        .HasColumnType("int");

                    b.Property<string>("DetailedDescription")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<DateTime>("EffectiveStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeEID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HireType")
                        .HasColumnType("int");

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LeaveWA")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<bool>("Offboarding")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("SupOrg")
                        .HasColumnType("int");

                    b.Property<int?>("TerminationReason")
                        .HasColumnType("int");

                    b.HasKey("CaseID");

                    b.ToTable("Termination");
                });

            modelBuilder.Entity("Resolve.Models.TerminationTracking", b =>
                {
                    b.Property<int>("TerminationTrackingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AWorkerType")
                        .HasColumnType("int");

                    b.Property<string>("BudgetNumbers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CaseAuditID")
                        .HasColumnType("int");

                    b.Property<int>("CaseID")
                        .HasColumnType("int");

                    b.Property<bool>("ClosePosition")
                        .HasColumnType("bit");

                    b.Property<int?>("Department")
                        .HasColumnType("int");

                    b.Property<string>("DetailedDescription")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<DateTime>("EffectiveStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeEID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HireType")
                        .HasColumnType("int");

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LeaveWA")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<bool>("Offboarding")
                        .HasColumnType("bit");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SupOrg")
                        .HasColumnType("int");

                    b.Property<int?>("TerminationReason")
                        .HasColumnType("int");

                    b.HasKey("TerminationTrackingID");

                    b.HasIndex("CaseAuditID");

                    b.HasIndex("CaseID");

                    b.ToTable("TerminationTracking");
                });

            modelBuilder.Entity("Resolve.Models.Travel", b =>
                {
                    b.Property<int>("CaseID")
                        .HasColumnType("int");

                    b.Property<float?>("AirfareCost")
                        .HasColumnType("real");

                    b.Property<string>("BudgetNumbers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BudgetPurpose")
                        .HasColumnType("int");

                    b.Property<string>("Destination")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("HotelsCost")
                        .HasColumnType("real");

                    b.Property<float?>("MealsCost")
                        .HasColumnType("real");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumNights")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Other1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Other2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("OtherCost1")
                        .HasColumnType("real");

                    b.Property<float?>("OtherCost2")
                        .HasColumnType("real");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("RegistrationCost")
                        .HasColumnType("real");

                    b.Property<float?>("Total")
                        .HasColumnType("real");

                    b.Property<float?>("TransportationCost")
                        .HasColumnType("real");

                    b.Property<DateTime?>("TravelEndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TravelFoodDepartment")
                        .HasColumnType("int");

                    b.Property<DateTime>("TravelStartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CaseID");

                    b.ToTable("Travel");

                    b.HasCheckConstraint("CK_Travel_BudgetPurpose_Enum_Constraint", "[BudgetPurpose] IN(0, 1, 2, 3, 4, 5, 6, 7)");

                    b.HasCheckConstraint("CK_Travel_TravelFoodDepartment_Enum_Constraint", "[TravelFoodDepartment] IN(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18)");
                });

            modelBuilder.Entity("Resolve.Models.TravelTracking", b =>
                {
                    b.Property<int>("TravelTrackingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float?>("AirfareCost")
                        .HasColumnType("real");

                    b.Property<string>("BudgetNumbers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BudgetPurpose")
                        .HasColumnType("int");

                    b.Property<int>("CaseAuditID")
                        .HasColumnType("int");

                    b.Property<int>("CaseID")
                        .HasColumnType("int");

                    b.Property<string>("Destination")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("HotelsCost")
                        .HasColumnType("real");

                    b.Property<float?>("MealsCost")
                        .HasColumnType("real");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumNights")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Other1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Other2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("OtherCost1")
                        .HasColumnType("real");

                    b.Property<float?>("OtherCost2")
                        .HasColumnType("real");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("RegistrationCost")
                        .HasColumnType("real");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("Total")
                        .HasColumnType("real");

                    b.Property<float?>("TransportationCost")
                        .HasColumnType("real");

                    b.Property<DateTime?>("TravelEndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TravelFoodDepartment")
                        .HasColumnType("int");

                    b.Property<DateTime>("TravelStartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("TravelTrackingID");

                    b.HasIndex("CaseAuditID");

                    b.HasIndex("CaseID");

                    b.ToTable("TravelTracking");

                    b.HasCheckConstraint("CK_TravelTracking_BudgetPurpose_Enum_Constraint", "[BudgetPurpose] IN(0, 1, 2, 3, 4, 5, 6, 7)");

                    b.HasCheckConstraint("CK_TravelTracking_TravelFoodDepartment_Enum_Constraint", "[TravelFoodDepartment] IN(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18)");
                });

            modelBuilder.Entity("Resolve.Models.UserGroup", b =>
                {
                    b.Property<string>("LocalUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LocalGroupID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LocalUserID", "LocalGroupID");

                    b.HasIndex("LocalGroupID");

                    b.ToTable("UserGroup");
                });

            modelBuilder.Entity("Resolve.Models.Approver", b =>
                {
                    b.HasOne("Resolve.Models.Case", "Case")
                        .WithMany("Approvers")
                        .HasForeignKey("CaseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Resolve.Models.LocalGroup", "LocalGroup")
                        .WithMany()
                        .HasForeignKey("LocalGroupID");

                    b.HasOne("Resolve.Models.LocalUser", "LocalUser")
                        .WithMany("CasesforApproval")
                        .HasForeignKey("LocalUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Resolve.Models.AxiumFeeSchedule", b =>
                {
                    b.HasOne("Resolve.Models.Case", "Case")
                        .WithMany("AxiumFeeSchedule")
                        .HasForeignKey("CaseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Resolve.Models.AxiumFeeScheduleTracking", b =>
                {
                    b.HasOne("Resolve.Models.CaseAudit", "CaseAudit")
                        .WithMany("AxiumFeeScheduleTrackings")
                        .HasForeignKey("CaseAuditID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Resolve.Models.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Resolve.Models.CPPaymentRequest", b =>
                {
                    b.HasOne("Resolve.Models.Case", "Case")
                        .WithMany("CPPaymentRequest")
                        .HasForeignKey("CaseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Resolve.Models.CPPaymentRequestTracking", b =>
                {
                    b.HasOne("Resolve.Models.CaseAudit", "CaseAudit")
                        .WithMany("CPPaymentRequestTrackings")
                        .HasForeignKey("CaseAuditID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Resolve.Models.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Resolve.Models.Case", b =>
                {
                    b.HasOne("Resolve.Models.CaseType", "CaseType")
                        .WithMany("Cases")
                        .HasForeignKey("CaseTypeID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Resolve.Models.LocalUser", "LocalUser")
                        .WithMany("Cases")
                        .HasForeignKey("LocalUserID")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("Resolve.Models.CaseAttachment", b =>
                {
                    b.HasOne("Resolve.Models.Case", "Case")
                        .WithMany("CaseAttachments")
                        .HasForeignKey("CaseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Resolve.Models.LocalUser", "LocalUser")
                        .WithMany()
                        .HasForeignKey("LocalUserID");
                });

            modelBuilder.Entity("Resolve.Models.CaseAudit", b =>
                {
                    b.HasOne("Resolve.Models.Case", "Case")
                        .WithMany("CaseAudits")
                        .HasForeignKey("CaseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Resolve.Models.LocalUser", "LocalUser")
                        .WithMany()
                        .HasForeignKey("LocalUserID");
                });

            modelBuilder.Entity("Resolve.Models.CaseComment", b =>
                {
                    b.HasOne("Resolve.Models.Case", "Case")
                        .WithMany("CaseComments")
                        .HasForeignKey("CaseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Resolve.Models.LocalUser", "LocalUser")
                        .WithMany()
                        .HasForeignKey("LocalUserID");
                });

            modelBuilder.Entity("Resolve.Models.CaseTypeGroup", b =>
                {
                    b.HasOne("Resolve.Models.CaseType", "CaseType")
                        .WithMany("CaseTypeGroups")
                        .HasForeignKey("CaseTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Resolve.Models.LocalGroup", "LocalGroup")
                        .WithMany("CaseTypeGroups")
                        .HasForeignKey("LocalGroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Resolve.Models.CompAllowanceChange", b =>
                {
                    b.HasOne("Resolve.Models.Case", "Case")
                        .WithMany("CompAllowanceChange")
                        .HasForeignKey("CaseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Resolve.Models.CompAllowanceChangeTracking", b =>
                {
                    b.HasOne("Resolve.Models.CaseAudit", "CaseAudit")
                        .WithMany("CompAllowanceChangeTrackings")
                        .HasForeignKey("CaseAuditID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Resolve.Models.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Resolve.Models.CompBasePayChange", b =>
                {
                    b.HasOne("Resolve.Models.Case", "Case")
                        .WithMany("CompBasePayChange")
                        .HasForeignKey("CaseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Resolve.Models.CompBasePayChangeTracking", b =>
                {
                    b.HasOne("Resolve.Models.CaseAudit", "CaseAudit")
                        .WithMany("CompBasePayChangeTrackings")
                        .HasForeignKey("CaseAuditID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Resolve.Models.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Resolve.Models.CostAllocationChange", b =>
                {
                    b.HasOne("Resolve.Models.Case", "Case")
                        .WithMany("CostAllocationChange")
                        .HasForeignKey("CaseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Resolve.Models.CostAllocationChangeTracking", b =>
                {
                    b.HasOne("Resolve.Models.CaseAudit", "CaseAudit")
                        .WithMany("CostAllocationChangeTrackings")
                        .HasForeignKey("CaseAuditID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Resolve.Models.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Resolve.Models.EmailPreference", b =>
                {
                    b.HasOne("Resolve.Models.LocalUser", "LocalUser")
                        .WithOne("EmailPreference")
                        .HasForeignKey("Resolve.Models.EmailPreference", "LocalUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Resolve.Models.EndDateChange", b =>
                {
                    b.HasOne("Resolve.Models.Case", "Case")
                        .WithMany("EndDateChange")
                        .HasForeignKey("CaseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Resolve.Models.EndDateChangeTracking", b =>
                {
                    b.HasOne("Resolve.Models.CaseAudit", "CaseAudit")
                        .WithMany("EndDateChangeTrackings")
                        .HasForeignKey("CaseAuditID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Resolve.Models.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Resolve.Models.FTEChange", b =>
                {
                    b.HasOne("Resolve.Models.Case", "Case")
                        .WithMany("FTEChange")
                        .HasForeignKey("CaseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Resolve.Models.FTEChangeTracking", b =>
                {
                    b.HasOne("Resolve.Models.CaseAudit", "CaseAudit")
                        .WithMany("FTEChangeTrackings")
                        .HasForeignKey("CaseAuditID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Resolve.Models.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Resolve.Models.FoodEvent", b =>
                {
                    b.HasOne("Resolve.Models.Case", "Case")
                        .WithMany("FoodEvent")
                        .HasForeignKey("CaseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Resolve.Models.FoodEventTracking", b =>
                {
                    b.HasOne("Resolve.Models.CaseAudit", "CaseAudit")
                        .WithMany("FoodEventTrackings")
                        .HasForeignKey("CaseAuditID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Resolve.Models.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Resolve.Models.GroupAssignment", b =>
                {
                    b.HasOne("Resolve.Models.Case", "Case")
                        .WithMany("GroupAssignments")
                        .HasForeignKey("CaseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Resolve.Models.LocalGroup", "LocalGroup")
                        .WithMany("GroupCases")
                        .HasForeignKey("LocalGroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Resolve.Models.HiringAffiliateFaculty", b =>
                {
                    b.HasOne("Resolve.Models.Case", "Case")
                        .WithMany("HiringAffiliateFaculty")
                        .HasForeignKey("CaseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Resolve.Models.HiringAffiliateFacultyTracking", b =>
                {
                    b.HasOne("Resolve.Models.CaseAudit", "CaseAudit")
                        .WithMany("HiringAffiliateFacultyTrackings")
                        .HasForeignKey("CaseAuditID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Resolve.Models.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Resolve.Models.HiringFaculty", b =>
                {
                    b.HasOne("Resolve.Models.Case", "Case")
                        .WithMany("HiringFaculty")
                        .HasForeignKey("CaseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Resolve.Models.HiringFacultyTracking", b =>
                {
                    b.HasOne("Resolve.Models.CaseAudit", "CaseAudit")
                        .WithMany("HiringFacultyTrackings")
                        .HasForeignKey("CaseAuditID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Resolve.Models.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Resolve.Models.HiringStaff", b =>
                {
                    b.HasOne("Resolve.Models.Case", "Case")
                        .WithMany("HiringStaff")
                        .HasForeignKey("CaseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Resolve.Models.HiringStaffTracking", b =>
                {
                    b.HasOne("Resolve.Models.CaseAudit", "CaseAudit")
                        .WithMany("HiringStaffTrackings")
                        .HasForeignKey("CaseAuditID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Resolve.Models.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Resolve.Models.LocalGroup", b =>
                {
                    b.HasOne("Resolve.Models.LocalUser", "LocalUser")
                        .WithMany()
                        .HasForeignKey("LocalUserID");
                });

            modelBuilder.Entity("Resolve.Models.MoveWorker", b =>
                {
                    b.HasOne("Resolve.Models.Case", "Case")
                        .WithMany("MoveWorker")
                        .HasForeignKey("CaseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Resolve.Models.MoveWorkerTracking", b =>
                {
                    b.HasOne("Resolve.Models.CaseAudit", "CaseAudit")
                        .WithMany("MoveWorkerTrackings")
                        .HasForeignKey("CaseAuditID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Resolve.Models.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Resolve.Models.OnBehalf", b =>
                {
                    b.HasOne("Resolve.Models.Case", "Case")
                        .WithMany("OnBehalves")
                        .HasForeignKey("CaseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Resolve.Models.LocalUser", "LocalUser")
                        .WithMany("OnBehalves")
                        .HasForeignKey("LocalUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Resolve.Models.PatientEvent", b =>
                {
                    b.HasOne("Resolve.Models.Case", "Case")
                        .WithMany("PatientEvent")
                        .HasForeignKey("CaseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Resolve.Models.PatientEventTracking", b =>
                {
                    b.HasOne("Resolve.Models.CaseAudit", "CaseAudit")
                        .WithMany("PatientEventTrackings")
                        .HasForeignKey("CaseAuditID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Resolve.Models.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Resolve.Models.PerioLimitedCare", b =>
                {
                    b.HasOne("Resolve.Models.Case", "Case")
                        .WithMany("PerioLimitedCare")
                        .HasForeignKey("CaseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Resolve.Models.PerioLimitedCareTracking", b =>
                {
                    b.HasOne("Resolve.Models.CaseAudit", "CaseAudit")
                        .WithMany("PerioLimitedCareTrackings")
                        .HasForeignKey("CaseAuditID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Resolve.Models.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Resolve.Models.SampleCaseType", b =>
                {
                    b.HasOne("Resolve.Models.Case", "Case")
                        .WithMany("SampleCaseType")
                        .HasForeignKey("CaseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Resolve.Models.SampleCaseTypeTracking", b =>
                {
                    b.HasOne("Resolve.Models.CaseAudit", "CaseAudit")
                        .WithMany("SampleCaseTypeTrackings")
                        .HasForeignKey("CaseAuditID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Resolve.Models.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Resolve.Models.ScholarResGradHire", b =>
                {
                    b.HasOne("Resolve.Models.Case", "Case")
                        .WithMany("ScholarResGradHire")
                        .HasForeignKey("CaseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Resolve.Models.ScholarResGradHireTracking", b =>
                {
                    b.HasOne("Resolve.Models.CaseAudit", "CaseAudit")
                        .WithMany("ScholarResGradHireTrackings")
                        .HasForeignKey("CaseAuditID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Resolve.Models.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Resolve.Models.SecurityRolesChange", b =>
                {
                    b.HasOne("Resolve.Models.Case", "Case")
                        .WithMany("SecurityRolesChange")
                        .HasForeignKey("CaseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Resolve.Models.SecurityRolesChangeTracking", b =>
                {
                    b.HasOne("Resolve.Models.CaseAudit", "CaseAudit")
                        .WithMany("SecurityRolesChangeTrackings")
                        .HasForeignKey("CaseAuditID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Resolve.Models.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Resolve.Models.Termination", b =>
                {
                    b.HasOne("Resolve.Models.Case", "Case")
                        .WithMany("Termination")
                        .HasForeignKey("CaseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Resolve.Models.TerminationTracking", b =>
                {
                    b.HasOne("Resolve.Models.CaseAudit", "CaseAudit")
                        .WithMany("TerminationTrackings")
                        .HasForeignKey("CaseAuditID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Resolve.Models.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Resolve.Models.Travel", b =>
                {
                    b.HasOne("Resolve.Models.Case", "Case")
                        .WithMany("Travel")
                        .HasForeignKey("CaseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Resolve.Models.TravelTracking", b =>
                {
                    b.HasOne("Resolve.Models.CaseAudit", "CaseAudit")
                        .WithMany("TravelTrackings")
                        .HasForeignKey("CaseAuditID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Resolve.Models.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Resolve.Models.UserGroup", b =>
                {
                    b.HasOne("Resolve.Models.LocalGroup", "LocalGroup")
                        .WithMany()
                        .HasForeignKey("LocalGroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Resolve.Models.LocalUser", "LocalUser")
                        .WithMany("UserGroups")
                        .HasForeignKey("LocalUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
